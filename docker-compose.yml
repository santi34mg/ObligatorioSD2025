version: "3.9"

networks:
  traefik:
    driver: bridge

services:
  traefik:
    image: traefik:v3.2
    container_name: traefik
    command:
      # API Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=true"

      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # Entry Points
      - "--entrypoints.web.address=:80"

      # Service Discovery
      - "--providers.docker.watch=true"

      # Logging
      - "--log.level=INFO"
      - "--accesslog=true"

      # Health Check
      - "--ping=true"

    ports:
      - "80:80"
      - "443:443"
      - "8081:8080" # Dashboard (cambiado a 8081)
      - "8082:8082" # Metrics (Prometheus)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-config:/etc/traefik:ro
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      # Dashboard
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=web"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      # Metrics
      - "traefik.http.routers.traefik-metrics.rule=Host(`metrics.localhost`)"
      - "traefik.http.routers.traefik-metrics.entrypoints=web"
      - "traefik.http.routers.traefik-metrics.service=prometheus@internal"

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.localhost`)"
      - "traefik.http.routers.rabbitmq.entrypoints=web"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    labels:
      - "traefik.enable=true"
      # Router para el frontend (HTTP only for local dev)
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"
    depends_on:
      - traefik
    networks:
      - traefik

  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-postgres}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672/
    labels:
      - "traefik.enable=true"
      # Router para API REST (HTTP y HTTPS)
      - "traefik.http.routers.auth.rule=PathPrefix(`/auth`) || PathPrefix(`/users`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.routers.auth.service=auth"
      - "traefik.http.routers.auth.priority=100"
      - "traefik.http.services.auth.loadbalancer.server.port=8000"
      # CORS headers
      - "traefik.http.middlewares.auth-cors.headers.accesscontrolalloworiginlist=http://localhost:5173,http://localhost"
      - "traefik.http.middlewares.auth-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.auth-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.auth-cors.headers.accesscontrolallowcredentials=true"
      - "traefik.http.routers.auth.middlewares=auth-cors"
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - traefik
    ports:
      - "8002:8000"

  moderation-service:
    build:
      context: .
      dockerfile: services/moderation-service/Dockerfile
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672/
    labels:
      - "traefik.enable=true"
      # Router para Moderation Service (HTTP y HTTPS)
      - "traefik.http.routers.moderation.rule=PathPrefix(`/moderation`)"
      - "traefik.http.routers.moderation.entrypoints=web,websecure"
      - "traefik.http.routers.moderation.service=moderation"
      - "traefik.http.services.moderation.loadbalancer.server.port=8001"
    depends_on:
      - rabbitmq
    networks:
      - traefik
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - traefik

  content-service:
    build: ./services/content-service
    ports:
      - "8001:8000"
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    depends_on:
      - mongo
      - minio
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.content.rule=PathPrefix(`/content`)"
      - "traefik.http.routers.content.entrypoints=web"
      - "traefik.http.routers.content.middlewares=cors"
      - "traefik.http.services.content.loadbalancer.server.port=8000"
    networks:
      - traefik

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    networks:
      - traefik

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data
    ports:
      - "9000:9000"
    networks:
      - traefik

  collaboration-service:
    build:
      context: ./services/collaboration-service
      dockerfile: Dockerfile
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - MONGO_DB=umshare
    depends_on:
      - mongo
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.collab.rule=PathPrefix(`/collab`)"
      - "traefik.http.routers.collab.entrypoints=web"
      - "traefik.http.routers.collab.middlewares=cors"
      - "traefik.http.services.collab.loadbalancer.server.port=8000"
    ports:
      - "8003:8000" # acceso directo opcional
    networks:
      - traefik

  moderation-service:
    build:
      context: ./services/moderation-service
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.moderation.rule=PathPrefix(`/moderation`)"
      - "traefik.http.routers.moderation.entrypoints=web"
      - "traefik.http.routers.moderation.middlewares=cors"
      - "traefik.http.services.moderation.loadbalancer.server.port=8000"
    ports:
      - "8004:8000"
    networks:
      - traefik

  websocket-service:
    build:
      context: ./services/websocket-service
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.websocket.rule=PathPrefix(`/ws`)"
      - "traefik.http.routers.websocket.entrypoints=web"
      - "traefik.http.services.websocket.loadbalancer.server.port=8000"
      # Configuración específica para WebSockets
      - "traefik.http.routers.websocket.middlewares=websocket-headers,cors"
      - "traefik.http.middlewares.websocket-headers.headers.customrequestheaders.Connection=Upgrade"
      - "traefik.http.middlewares.websocket-headers.headers.customrequestheaders.Upgrade=websocket"
    ports:
      - "8005:8000"
    networks:
      - traefik
    restart: unless-stopped

  communication-service:
    build:
      context: ./services/communication-service
      dockerfile: Dockerfile
    ports:
      - "8006:8000"
    depends_on:
      - mongo
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.communication.rule=PathPrefix(`/communication`)"
      - "traefik.http.routers.communication.entrypoints=web"
      - "traefik.http.routers.communication.middlewares=cors"
      - "traefik.http.services.communication.loadbalancer.server.port=8000"

volumes:
  db_data:
  minio_data:
