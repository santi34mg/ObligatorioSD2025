version: "3.9"

networks:
  traefik:
    driver: bridge

services:
  traefik:
    image: traefik:v3.2
    container_name: traefik
    command:
      # API Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=true"
      
      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      
      # Entry Points
      - "--entrypoints.web.address=:80"
      
      # Service Discovery
      - "--providers.docker.watch=true"
      
      # Logging
      - "--log.level=INFO"
      - "--accesslog=true"
      
      # Health Check
      - "--ping=true"
      
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"   # Dashboard
      - "8082:8082"   # Metrics (Prometheus)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-config:/etc/traefik:ro
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      # Dashboard
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=web"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      # Metrics
      - "traefik.http.routers.traefik-metrics.rule=Host(`metrics.localhost`)"
      - "traefik.http.routers.traefik-metrics.entrypoints=web"
      - "traefik.http.routers.traefik-metrics.service=prometheus@internal"

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.localhost`)"
      - "traefik.http.routers.rabbitmq.entrypoints=web"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    labels:
      - "traefik.enable=true"
      # Router para el frontend (HTTP y HTTPS)
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web,websecure"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"
    depends_on:
      - traefik

# auth-service:
#   build:
#     context: .
#     dockerfile: services/auth-service/Dockerfile
#   environment:
#     - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-postgres}
#   labels:
#     - "traefik.enable=true"
#     # Router para API REST (HTTP y HTTPS)
#     - "traefik.http.routers.auth.rule=PathPrefix(`/auth`)"
#     - "traefik.http.routers.auth.entrypoints=web,websecure"
#     - "traefik.http.routers.auth.service=auth"
#     - "traefik.http.services.auth.loadbalancer.server.port=8000"
#   depends_on:
#     - db
#     - rabbitmq
#   networks:
#     - traefik

# moderation-service:
#   build:
#     context: .
#     dockerfile: services/moderation-service/Dockerfile
#   environment:
#     - RABBITMQ_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASS:-guest}@rabbitmq:5672/
#   labels:
#     - "traefik.enable=true"
#     # Router para Moderation Service (HTTP y HTTPS)
#     - "traefik.http.routers.moderation.rule=PathPrefix(`/moderation`)"
#     - "traefik.http.routers.moderation.entrypoints=web,websecure"
#     - "traefik.http.routers.moderation.service=moderation"
#     - "traefik.http.services.moderation.loadbalancer.server.port=8001"
#   depends_on:
#     - rabbitmq
#   networks:
#     - traefik
#   restart: unless-stopped

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - traefik


  content-service:
    build: ./services/content-service
    ports:
      - "8001:8000"
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    depends_on:
      - mongo
      - minio

  mongo:
    image: mongo
    ports:
      - "27017:27017"

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data
    ports:
      - "9000:9000"

  collaboration-service:
    build:
      context: ./services/collaboration-service
      dockerfile: Dockerfile
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - MONGO_DB=umshare
    depends_on:
      - mongo
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.collab.rule=PathPrefix(`/collab`)"
      - "traefik.http.services.collab.loadbalancer.server.port=8000"
    ports:
      - "8003:8000"   # acceso directo opcional
    networks:
      - traefik

  moderation-service:
    build:
      context: ./services/moderation-service
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.moderation.rule=PathPrefix(`/moderation`)"
      - "traefik.http.services.moderation.loadbalancer.server.port=8000"
    ports:
      - "8004:8000"
    networks:
      - traefik



volumes:
  db_data:
  minio_data:
